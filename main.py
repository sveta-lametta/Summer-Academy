# main.py
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, ConversationHandler
import csv

# –°—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞
NAME, AGE, GENDER, COUNTRY, Q1, Q2, Q3 = range(7)

user_data_list = []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return AGE

async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["age"] = update.message.text
    await update.message.reply_text("–¢–≤–æ–π –ø–æ–ª? (–º/–∂/–¥—Ä—É–≥–æ–µ)")
    return GENDER

async def get_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["gender"] = update.message.text
    await update.message.reply_text("–ò–∑ –∫–∞–∫–æ–π —Ç—ã —Å—Ç—Ä–∞–Ω—ã?")
    return COUNTRY

async def get_country(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["country"] = update.message.text
    await update.message.reply_text(
        "1. –ö–∞–∫ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π?",
        reply_markup=ReplyKeyboardMarkup([["üê¢", "üêç", "ü¶Ö"]], one_time_keyboard=True, resize_keyboard=True)
    )
    return Q1

async def get_q1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["q1"] = update.message.text
    await update.message.reply_text(
        "2. –ö–∞–∫ —Ç—ã –æ—Ç–¥—ã—Ö–∞–µ—à—å?",
        reply_markup=ReplyKeyboardMarkup([["üê¢", "üêç", "ü¶Ö"]], one_time_keyboard=True, resize_keyboard=True)
    )
    return Q2

async def get_q2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["q2"] = update.message.text
    await update.message.reply_text(
        "3. –ö–∞–∫ —Ç—ã –≤–µ–¥—ë—à—å —Å–µ–±—è –≤ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø–µ?",
        reply_markup=ReplyKeyboardMarkup([["üê¢", "üêç", "ü¶Ö"]], one_time_keyboard=True, resize_keyboard=True)
    )
    return Q3

async def get_q3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["q3"] = update.message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
    user_data_list.append(context.user_data.copy())

    # –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ CSV
    with open("responses.csv", "a", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=["name", "age", "gender", "country", "q1", "q2", "q3"])
        writer.writerow(context.user_data)

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª —Ç–µ—Å—Ç üåü")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø—Ä–æ—Å –ø—Ä–µ—Ä–≤–∞–Ω.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token("YOUR_BOT_TOKEN").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
            GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_gender)],
            COUNTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_country)],
            Q1: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_q1)],
            Q2: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_q2)],
            Q3: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_q3)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
