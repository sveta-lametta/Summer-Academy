# –ò–º–ø–æ—Ä—Ç—ã
import os
import json
import gspread
import pandas as pd
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive",
]

# –ó–∞–≥—Ä—É–∂–∞–µ–º JSON –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
creds_dict = json.loads(os.environ["GOOGLE_CREDS_JSON"])
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open("Bahratal_bot").sheet1  # –ó–∞–º–µ–Ω–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã

# –°—Ç–∞–¥–∏–∏ –¥–∏–∞–ª–æ–≥–∞
NAME, AGE, GENDER, COUNTRY, Q1, Q2, Q3 = range(7)

# –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
reply_keyboard_q1 = [
    ["–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –æ–±—â–∞—Ç—å—Å—è —Å 1-2 –ª—é–¥—å–º–∏ –∏–ª–∏ –±—ã—Ç—å –æ–¥–∏–Ω"],
    ["–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏ –≤ –æ–¥–∏–Ω–æ—á–∫—É, –∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏"],
    ["–õ—é–±–ª—é –±—ã—Ç—å —Å—Ä–µ–¥–∏ –ª—é–¥–µ–π, –ª–µ–≥–∫–æ –∑–∞–≤–æ–∂—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞"],
]

reply_keyboard_q2 = [
    ["–ß–∏—Ç–∞—é –∫–Ω–∏–≥—É –∏–ª–∏ —Å–º–æ—Ç—Ä—é —Ñ–∏–ª—å–º –¥–æ–º–∞"],
    ["–í—Å—Ç—Ä–µ—á–∞—é—Å—å —Å –¥—Ä—É–∑—å—è–º–∏ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫–µ"],
    ["–ò—â—É –Ω–æ–≤—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"],
]

reply_keyboard_q3 = [
    ["–°—Ç–∞—Ä–∞—é—Å—å –Ω–∞–±–ª—é–¥–∞—Ç—å, –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–≤—ã–∫–Ω—É –∫ –≥—Ä—É–ø–ø–µ"],
    ["–°—Ç–∞—Ä–∞—é—Å—å –±—ã—Å—Ç—Ä–æ –∑–∞–≤–µ—Å—Ç–∏ –ø–∞—Ä—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤"],
    ["–ê–∫—Ç–∏–≤–Ω–æ –≤–∫–ª—é—á–∞—é—Å—å –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –∑–Ω–∞–∫–æ–º–ª—é—Å—å —Å–æ –≤—Å–µ–º–∏"],
]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–∏–º—è, —Ñ–∞–º–∏–ª–∏—è)")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return AGE

async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["age"] = update.message.text
    await update.message.reply_text("–¢–≤–æ–π –ø–æ–ª? (–º/–∂/–¥—Ä—É–≥–æ–µ)")
    return GENDER

async def get_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["gender"] = update.message.text
    await update.message.reply_text("–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ —Ç—ã –∂–∏–≤–µ—à—å —Å–µ–π—á–∞—Å?")
    return COUNTRY

async def get_country(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["country"] = update.message.text
    await update.message.reply_text(
        "1. –ö–∞–∫ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π (–≤—ã–±–µ—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, –Ω–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Å–≤–æ–π)?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard_q1, one_time_keyboard=True, resize_keyboard=True),
    )
    return Q1

async def get_q1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["q1"] = update.message.text
    await update.message.reply_text(
        "2. –ö–∞–∫ —Ç—ã –æ—Ç–¥—ã—Ö–∞–µ—à—å (–≤—ã–±–µ—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, –Ω–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Å–≤–æ–π)?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard_q2, one_time_keyboard=True, resize_keyboard=True),
    )
    return Q2

async def get_q2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["q2"] = update.message.text
    await update.message.reply_text(
        "3. –ö–∞–∫ —Ç—ã –≤–µ–¥—ë—à—å —Å–µ–±—è –≤ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø–µ (–≤—ã–±–µ—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, –Ω–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Å–≤–æ–π)?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard_q3, one_time_keyboard=True, resize_keyboard=True),
    )
    return Q3

async def get_q3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["q3"] = update.message.text

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
    values = [
        context.user_data.get("name", ""),
        context.user_data.get("age", ""),
        context.user_data.get("gender", ""),
        context.user_data.get("country", ""),
        context.user_data.get("q1", ""),
        context.user_data.get("q2", ""),
        context.user_data.get("q3", ""),
    ]
    sheet.append_row(values)

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª —Ç–µ—Å—Ç üåü")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø—Ä–æ—Å –ø—Ä–µ—Ä–≤–∞–Ω.")
    return ConversationHandler.END

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    token = os.getenv("BOT_TOKEN")
    if not token:
        print("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        return

    app = ApplicationBuilder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
            GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_gender)],
            COUNTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_country)],
            Q1: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_q1)],
            Q2: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_q2)],
            Q3: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_q3)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.run_polling()
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.cluster import KMeans
import pandas as pd
import numpy as np

def distribute_to_groups(gsheet_client, sheet_name="Bahratal_bot", target_sheet="Groups", n_groups=4):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    sheet = gsheet_client.open(sheet_name).sheet1
    data = sheet.get_all_records()
    df = pd.DataFrame(data)

    if len(df) < n_groups:
        print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø.")
        return

    # –û—á–∏—Å—Ç–∫–∞
    df["age"] = pd.to_numeric(df["age"], errors="coerce")
    df.dropna(subset=["age"], inplace=True)

    # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö
    for col in ["gender", "country", "q1", "q2", "q3"]:
        df[col] = df[col].astype(str)
        df[col] = LabelEncoder().fit_transform(df[col])

    features = ["age", "gender", "country", "q1", "q2", "q3"]
    X = df[features]

    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
    kmeans = KMeans(n_clusters=n_groups, random_state=42, n_init='auto')
    df["group"] = kmeans.fit_predict(X_scaled)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
    try:
        sh = gsheet_client.open(sheet_name)
        try:
            sh.del_worksheet(sh.worksheet(target_sheet))
        except:
            pass
        new_ws = sh.add_worksheet(title=target_sheet, rows="100", cols="20")
        new_ws.update([df.columns.values.tolist()] + df.values.tolist())
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø:", e)

    print("–ì—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

if __name__ == "__main__":
    main()
